cmake_minimum_required (VERSION 3.4)

set(SKVM_VERSION_MAJOR 2)
set(SKVM_VERSION_MINOR 4)
set(SKVM_VERSION_PATCH 0)
set(SKVM_VERSION_STAGE "release")

# SKVM Version
if(NOT DEFINED SKVM_VERSION_MAJOR)
    if(DEFINED ENV{SKVM_VERSION_MAJOR})
        set(SKVM_VERSION_MAJOR $ENV{SKVM_VERSION_MAJOR})
    else()
        set(SKVM_VERSION_MAJOR 2)
    endif()
endif()

if(NOT DEFINED SKVM_VERSION_MINOR)
    if(DEFINED ENV{SKVM_VERSION_MINOR})
        set(SKVM_VERSION_MINOR $ENV{SKVM_VERSION_MINOR})
    else()
        set(SKVM_VERSION_MINOR 3)
    endif()
endif()

if(NOT DEFINED SKVM_VERSION_PATCH)
    if(DEFINED ENV{SKVM_VERSION_PATCH})
        set(SKVM_VERSION_PATCH $ENV{SKVM_VERSION_PATCH})
    else()
        set(SKVM_VERSION_PATCH 2)
        message(WARNING "SKVM version wasn't set. Set to ${SKVM_VERSION_MAJOR}.${SKVM_VERSION_MINOR}.${SKVM_VERSION_PATCH}")
    endif()
endif()

if(NOT DEFINED SKVM_VERSION_STAGE)
    if(DEFINED ENV{SKVM_VERSION_STAGE})
        set(SKVM_VERSION_STAGE $ENV{SKVM_VERSION_STAGE})
    else()
        set(SKVM_VERSION_STAGE "snapshot")
    endif()
endif()

if(NOT DEFINED SKVM_REVISION)
    if(DEFINED ENV{GIT_COMMIT})
        string(SUBSTRING $ENV{GIT_COMMIT} 0 8 SKVM_REVISION)
    else()
        find_program (GIT_BINARY git)
        if (NOT GIT_BINARY STREQUAL "GIT_BINARY-NOTFOUND")
            execute_process (
                COMMAND git rev-parse --short=8 HEAD
                WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
                OUTPUT_VARIABLE SKVM_REVISION
                OUTPUT_STRIP_TRAILING_WHITESPACE
            )
        endif()
    endif()
endif()

string(LENGTH "${SKVM_REVISION}" SKVM_REVISION_LENGTH)
if (NOT SKVM_REVISION_LENGTH EQUAL 8 OR NOT SKVM_REVISION MATCHES "^[a-f0-9]+")
    set(SKVM_REVISION "00000000")
    message(WARNING "revision not found. setting to ${SKVM_REVISION}")
endif()
unset(SKVM_REVISION_LENGTH)

if (DEFINED ENV{BUILD_NUMBER})
    set(SKVM_BUILD_NUMBER $ENV{BUILD_NUMBER})
else()
    set(SKVM_BUILD_NUMBER 1)
endif()

string(TIMESTAMP SKVM_BUILD_DATE "%Y%m%d" UTC)
string(TIMESTAMP SKVM_BUILD_TIME "%H%M" UTC)
string(TIMESTAMP SKVM_BUILD_DATE_ISO "%Y-%m-%d" UTC)
set(SKVM_SNAPSHOT_INFO ".${SKVM_VERSION_STAGE}.${SKVM_REVISION}")

if(SKVM_VERSION_STAGE STREQUAL "snapshot")
    set(SKVM_VERSION_TAG "${SKVM_VERSION_STAGE}.b${SKVM_BUILD_NUMBER}-${SKVM_REVISION}")
else()
    set(SKVM_VERSION_TAG "${SKVM_VERSION_STAGE}")
endif()

set(SKVM_VERSION "${SKVM_VERSION_MAJOR}.${SKVM_VERSION_MINOR}.${SKVM_VERSION_PATCH}-${SKVM_VERSION_STAGE}")
set(SKVM_VERSION_STRING "${SKVM_VERSION}-${SKVM_VERSION_TAG}")
message(STATUS "Full version string is '" ${SKVM_VERSION_STRING} "'")

add_definitions(-DSKVM_VERSION="${SKVM_VERSION}")
add_definitions(-DSKVM_VERSION_STRING="${SKVM_VERSION_STRING}")
add_definitions(-DSKVM_VERSION_MAJOR=${SKVM_VERSION_MAJOR})
add_definitions(-DSKVM_VERSION_MINOR=${SKVM_VERSION_MINOR})
add_definitions(-DSKVM_VERSION_PATCH=${SKVM_VERSION_PATCH})
add_definitions(-DSKVM_REVISION="${SKVM_REVISION}")
add_definitions(-DSKVM_BUILD_DATE="${SKVM_BUILD_DATE}")
add_definitions(-DSKVM_BUILD_NUMBER=${SKVM_BUILD_NUMBER})

if(SKVM_DEVELOPER_MODE)
    add_definitions(-DSKVM_DEVELOPER_MODE=1)
endif()

